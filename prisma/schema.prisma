generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ChairStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  CONFIRMED
}

enum EmailType {
  CONFIRMATION
  REMINDER
  CREATED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  STATUS_CHANGE
}

model Role {
  id               Int            @id @default(autoincrement())
  name             String         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  users            User[]
  requestedByUsers UserApproval[] @relation("RoleRequested")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  password     String
  status       String         @default("pending") // "pending", "approved", "rejected"
  roleId       Int
  fullName     String?        // Nome completo
  cpf          String?        @unique // CPF
  jobFunction  String?        // Função
  position     String?        // Cargo
  registration String?        @unique // Matrícula
  sector       String?        // Setor
  email        String?        @unique // E-mail
  phone        String?        // Telefone
  gender       String?        // Sexo
  birthDate    DateTime?      // Data de nascimento
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  role         Role           @relation(fields: [roleId], references: [id])
  approvals    UserApproval[] @relation("RequestedUser")
  approvedByMe UserApproval[] @relation("ApprovedBy")
  appointments Appointment[]
  auditLogs    AuditLog[]
}

model UserApproval {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation("RequestedUser", fields: [userId], references: [id])
  requestedRoleId Int
  requestedRole   Role      @relation("RoleRequested", fields: [requestedRoleId], references: [id])
  approvedById    Int?
  approvedBy      User?     @relation("ApprovedBy", fields: [approvedById], references: [id])
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model Chair {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  location     String?
  status       ChairStatus   @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  appointments Appointment[]
}

model ScheduleConfig {
  id         Int         @id @default(1) // sempre 1, singleton
  timeRanges Json // [{"start": "08:00", "end": "10:00"}, {"start": "14:00", "end": "16:00"}]
  validFrom  DateTime?
  validTo    DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  days       DayOfWeek[]
}

model DayOfWeek {
  id               Int             @id @default(autoincrement())
  name             String // "monday", "tuesday", "wednesday", etc.
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  scheduleConfig   ScheduleConfig? @relation(fields: [scheduleConfigId], references: [id])
  scheduleConfigId Int? // nullable, pois dias podem existir sem configuração
}

model Appointment {
  id                Int               @id @default(autoincrement())
  user              User              @relation(fields: [userId], references: [id])
  userId            Int
  chair             Chair             @relation(fields: [chairId], references: [id])
  chairId           Int
  datetimeStart     DateTime
  datetimeEnd       DateTime
  status            AppointmentStatus @default(SCHEDULED)
  presenceConfirmed Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  emailLogs         EmailLog[]
}

model EmailLog {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int
  emailType     EmailType
  recipientEmail String
  subject       String
  status        EmailStatus @default(PENDING)
  sentAt        DateTime?
  errorMessage  String?  @db.Text
  category      String?     // Mailtrap category
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  
  @@unique([appointmentId, emailType]) // Previne duplicatas do mesmo tipo para o mesmo appointment
}

model AuditLog {
  id         Int         @id @default(autoincrement())
  tableName  String      // Nome da tabela afetada
  recordId   String      // ID do registro afetado (String para suportar diferentes tipos)
  action     AuditAction // Tipo de ação
  userId     Int?        // ID do usuário que executou a ação (nullable para ações do sistema)
  user       User?       @relation(fields: [userId], references: [id])
  oldValues  Json?       // Valores antigos (UPDATE/DELETE)
  newValues  Json?       // Valores novos (CREATE/UPDATE)
  changes    Json?       // Apenas campos alterados (resumo)
  metadata   Json?       // Contexto adicional (IP, user agent, etc.)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?

  @@index([tableName, recordId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}
